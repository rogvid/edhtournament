FROM python:3.8.3-alpine as python-base

ENV PYTHONUNBUFFERED=1 \
  PYTHONDONTWRITEBYTECODE=1 \
  PYTHONHASHSEED=random \
  PIP_NO_CACHE_DIR=off \
  PIP_DISABLE_PIP_VERSION_CHECK=on \
  PIP_DEFAULT_TIMEOUT=100 \
  POETRY_VERSION=1.0

# Set work directory and add poetry script to container scripts directory
WORKDIR /usr/src/app/
# RUN mkdir scripts

# Add bash and curl dependencies
# RUN apk --no-cache add bash
# RUN apk --no-cache add curl

# Install psycopg2 dependencies
RUN apk update \
  && apk add postgresql-dev gcc python3-dev musl-dev libffi-dev

# Install poetry through bash script
# COPY ./scripts/get-poetry.* /usr/src/app/scripts/
# RUN bash /usr/src/app/scripts/get-poetry.sh
# Install poetry through pip
RUN pip install --upgrade pip
RUN pip install "poetry==$POETRY_VERSION"

# Copy dependencies definitions. If these files are unchanged, the dependencies
# layer of the container from previous builds will be reused.
COPY ./pyproject.toml ./poetry.lock ./

# Project initialization if bash script was used to install poetry
# RUN $HOME/.poetry/bin/poetry config virtualenvs.create false \
#   && $HOME/.poetry/bin/poetry install --no-dev --no-interaction --no-ansi --dependencies-only
# Project initialization if pip was used to install poetry
RUN poetry config virtualenvs.create false \
  && poetry install --no-dev --no-interaction --no-ansi

COPY ./scripts/entrypoint.sh .

COPY . .

# Run entrypoint.sh
ENTRYPOINT ["/usr/src/app/scripts/entrypoint.sh"]

##########
#  Prod  #
##########
FROM python:3.8.3-alpine as prod

# Create directory for the app user
RUN mkdir -p /home/app

# Create the app user
RUN addgroup -S app && adduser -S app -G app

# Create the appropriate directories
ENV HOME=/home/app
ENV APP_HOME=/home/app/api
RUN mkdir $APP_HOME
WORKDIR $APP_HOME

# Install dependencies
RUN apk update && apk add libpq libffi
COPY --from=python-base /usr/src/app/wheels /wheels
COPY --from=python-base /usr/src/app/requirements.txt .
RUN pip install --no-cache /wheels/*

COPY ./scripts/entrypoint.sh $APP_HOME

# Copy the back-end app.
COPY . $APP_HOME

RUN chown -R app:app $APP_HOME

USER app

# Run entrypoint.sh
ENTRYPOINT ["/home/app/api/entrypoint.sh"]
